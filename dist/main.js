(()=>{"use strict";const e=function(){const e={};return{subscribe:function(t,...n){e[t]=e[t]||[],e[t].push(...n)},unsubscribe:function(t,n){e[t]&&(e[t]=e[t].filter((e=>e!==n)))},publish:function(t,n){e[t]&&e[t].forEach((e=>e(n)))}}}(),t=(()=>{const e=[];return{tasks:e,store:(...t)=>e.push(...t),remove:t=>{e.splice(e.indexOf(t),1)}}})(),n=(()=>{const n=window.localStorage,r=!!function(e){let t;try{t=window.localStorage;let e="__storage_test__";return t.setItem(e,e),t.removeItem(e),!0}catch(e){return e instanceof DOMException&&(22===e.code||1014===e.code||"QuotaExceededError"===e.name||"NS_ERROR_DOM_QUOTA_REACHED"===e.name)&&t&&0!==t.length}}(),a=[];function o(){n.setItem("tasks",JSON.stringify(t.tasks))}return e.subscribe("taskAdded",o),e.subscribe("taskChecked",o),e.subscribe("taskUnchecked",o),e.subscribe("taskDeleted",o),e.subscribe("taskUpdated",o),{storeLocal:o,loadLocalStorage:function(){if(r&&n.tasks)for(const e of JSON.parse(n.tasks))a.push(e);return a}}})();function r(e,t,n,r,a="No Project",o=!1){return{name:e,notes:t,date:n,priority:r,project:a,completed:o}}function a(n){const r=document.createElement("div"),a=document.createElement("div"),o=document.createElement("span"),i=document.createElement("span"),s=document.createElement("input");s.type="checkbox",s.classList.add("check-task"),s.addEventListener("click",(t=>{t.stopPropagation(),a.classList.toggle("completed"),s.checked?(n.completed=!0,e.publish("taskChecked",n)):(n.completed=!1,e.publish("taskUnchecked",n))})),n.completed&&(s.checked=!0,a.classList.add("completed")),r.classList.add("task-item"),a.classList.add("task-short"),o.textContent=`${n.name}`,i.textContent=`${n.notes}`,a.append(s,o,i),"!!!"===n.priority?a.style.borderLeftColor="red":"!!"===n.priority?a.style.borderLeftColor="#4b4bff":a.style.borderLeftColor="lime";const u=function(n){const r=document.querySelector(".task-form").cloneNode(!0);r.classList.add("task-expanded"),r.classList.remove("task-form");const a=r.name,o=r.notes,i=r.date,s=r.priority,u=r.project,c=r.save;c.disabled=!0;const d=r.cancel;return d.classList.remove("cancel"),d.classList.add("delete"),d.value="Delete",d.addEventListener("click",(()=>{t.remove(n),e.publish("taskDeleted",n)})),c.addEventListener("click",(t=>{t.preventDefault(),function(e,t){e.name=t.name.value,e.notes=t.notes.value,e.project=t.project.value,e.date=t.date.value,e.priority=t.priority.value}(n,r),e.publish("taskUpdated",n)})),[a,o,i,s,u].forEach((e=>e.addEventListener("change",(()=>c.disabled=!1)))),a.value=n.name,o.value=n.notes,i.value=n.date,s.value=n.priority,u.value=n.project,c.textContent="Save",r.firstElementChild.remove(),r}(n);return r.append(a,u),a.addEventListener("click",(function(){this.classList.toggle("hidden");const e=this.nextElementSibling;e.classList.toggle("active"),e.style.maxHeight?e.style.maxHeight=null:e.style.maxHeight=`${e.scrollHeight}px`})),r}function o(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function i(e){o(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function s(e){o(1,arguments);var t=i(e);return!isNaN(t)}var u={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function c(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}var d,l={date:c({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:c({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:c({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},h={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function m(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=a.width?String(a.width):o;r=e.formattingValues[i]||e.formattingValues[o]}else{var s=e.defaultWidth,u=a.width?String(a.width):e.defaultWidth;r=e.values[u]||e.values[s]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function f(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,s=o[0],u=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(u)?w(u,(function(e){return e.test(s)})):g(u,(function(e){return e.test(s)}));i=e.valueCallback?e.valueCallback(c):c,i=n.valueCallback?n.valueCallback(i):i;var d=t.slice(s.length);return{value:i,rest:d}}}function g(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function w(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const v={code:"en-US",formatDistance:function(e,t,n){var r;return n=n||{},r="string"==typeof u[e]?u[e]:1===t?u[e].one:u[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r},formatLong:l,formatRelative:function(e,t,n,r){return h[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:m({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:m({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:m({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:m({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:m({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(d={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(d.matchPattern);if(!n)return null;var r=n[0],a=e.match(d.parsePattern);if(!a)return null;var o=d.valueCallback?d.valueCallback(a[0]):a[0];o=t.valueCallback?t.valueCallback(o):o;var i=e.slice(r.length);return{value:o,rest:i}}),era:f({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:f({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:f({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:f({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:f({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function b(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function y(e,t){o(2,arguments);var n=i(e).getTime(),r=b(t);return new Date(n+r)}function p(e,t){o(2,arguments);var n=b(t);return y(e,-n)}function k(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const C=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return k("yy"===t?r%100:r,t.length)},T=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):k(n+1,2)},x=function(e,t){return k(e.getUTCDate(),t.length)},D=function(e,t){return k(e.getUTCHours()%12||12,t.length)},M=function(e,t){return k(e.getUTCHours(),t.length)},S=function(e,t){return k(e.getUTCMinutes(),t.length)},E=function(e,t){return k(e.getUTCSeconds(),t.length)},U=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return k(Math.floor(r*Math.pow(10,n-3)),t.length)};var P=864e5;function L(e){o(1,arguments);var t=1,n=i(e),r=n.getUTCDay(),a=(r<t?7:0)+r-t;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function N(e){o(1,arguments);var t=i(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=L(r),s=new Date(0);s.setUTCFullYear(n,0,4),s.setUTCHours(0,0,0,0);var u=L(s);return t.getTime()>=a.getTime()?n+1:t.getTime()>=u.getTime()?n:n-1}function q(e){o(1,arguments);var t=N(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=L(n);return r}var W=6048e5;function Y(e,t){o(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.weekStartsOn,s=null==a?0:b(a),u=null==n.weekStartsOn?s:b(n.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=i(e),d=c.getUTCDay(),l=(d<u?7:0)+d-u;return c.setUTCDate(c.getUTCDate()-l),c.setUTCHours(0,0,0,0),c}function O(e,t){o(1,arguments);var n=i(e,t),r=n.getUTCFullYear(),a=t||{},s=a.locale,u=s&&s.options&&s.options.firstWeekContainsDate,c=null==u?1:b(u),d=null==a.firstWeekContainsDate?c:b(a.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=new Date(0);l.setUTCFullYear(r+1,0,d),l.setUTCHours(0,0,0,0);var h=Y(l,t),m=new Date(0);m.setUTCFullYear(r,0,d),m.setUTCHours(0,0,0,0);var f=Y(m,t);return n.getTime()>=h.getTime()?r+1:n.getTime()>=f.getTime()?r:r-1}function j(e,t){o(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.firstWeekContainsDate,i=null==a?1:b(a),s=null==n.firstWeekContainsDate?i:b(n.firstWeekContainsDate),u=O(e,t),c=new Date(0);c.setUTCFullYear(u,0,s),c.setUTCHours(0,0,0,0);var d=Y(c,t);return d}var H=6048e5;function z(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+k(o,2)}function A(e,t){return e%60==0?(e>0?"-":"+")+k(Math.abs(e)/60,2):F(e,t)}function F(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+k(Math.floor(a/60),2)+n+k(a%60,2)}const Q={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});case"GGGG":default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return C(e,t)},Y:function(e,t,n,r){var a=O(e,r),o=a>0?a:1-a;return"YY"===t?k(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):k(o,t.length)},R:function(e,t){return k(N(e),t.length)},u:function(e,t){return k(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return k(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return k(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return T(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return k(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=function(e,t){o(1,arguments);var n=i(e),r=Y(n,t).getTime()-j(n,t).getTime();return Math.round(r/H)+1}(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):k(a,t.length)},I:function(e,t,n){var r=function(e){o(1,arguments);var t=i(e),n=L(t).getTime()-q(t).getTime();return Math.round(n/W)+1}(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):k(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):x(e,t)},D:function(e,t,n){var r=function(e){o(1,arguments);var t=i(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),a=n-r;return Math.floor(a/P)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):k(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});case"EEEE":default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return k(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});case"eeee":default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return k(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});case"cccc":default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return k(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});case"iiii":default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return D(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):M(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):k(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):k(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):S(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):E(e,t)},S:function(e,t){return U(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return A(a);case"XXXX":case"XX":return F(a);case"XXXXX":case"XXX":default:return F(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return A(a);case"xxxx":case"xx":return F(a);case"xxxxx":case"xxx":default:return F(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+z(a,":");case"OOOO":default:return"GMT"+F(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+z(a,":");case"zzzz":default:return"GMT"+F(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return k(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return k((r._originalDate||e).getTime(),t.length)}};function X(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function G(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}const R={p:G,P:function(e,t){var n,r=e.match(/(P+)(p+)?/),a=r[1],o=r[2];if(!o)return X(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",X(a,t)).replace("{{time}}",G(o,t))}};function B(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var _=["D","DD"],I=["YY","YYYY"];function V(e){return-1!==_.indexOf(e)}function J(e){return-1!==I.indexOf(e)}function $(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var Z=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,K=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ee=/^'([^]*?)'?$/,te=/''/g,ne=/[a-zA-Z]/;function re(e,t,n){o(2,arguments);var r=String(t),a=n||{},u=a.locale||v,c=u.options&&u.options.firstWeekContainsDate,d=null==c?1:b(c),l=null==a.firstWeekContainsDate?d:b(a.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=u.options&&u.options.weekStartsOn,m=null==h?0:b(h),f=null==a.weekStartsOn?m:b(a.weekStartsOn);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!u.localize)throw new RangeError("locale must contain localize property");if(!u.formatLong)throw new RangeError("locale must contain formatLong property");var g=i(e);if(!s(g))throw new RangeError("Invalid time value");var w=B(g),y=p(g,w),k={firstWeekContainsDate:l,weekStartsOn:f,locale:u,_originalDate:g},C=r.match(K).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,R[t])(e,u.formatLong,k):e})).join("").match(Z).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return ae(n);var o=Q[r];if(o)return!a.useAdditionalWeekYearTokens&&J(n)&&$(n,t,e),!a.useAdditionalDayOfYearTokens&&V(n)&&$(n,t,e),o(y,n,u.localize,k);if(r.match(ne))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return C}function ae(e){return e.match(ee)[1].replace(te,"'")}const oe=function(){const n=document.querySelector(".view"),r=document.createElement("h1");r.textContent="Today's Tasks";const o=document.createElement("section");o.classList.add("task-list");const i=re(new Date,"yyyy-MM-dd"),s=t.tasks,u=document.querySelector(".today-stats");function c(){n.textContent="",o.textContent="";for(const e of s)d(e);n.append(r,o)}function d(e){e.date===i&&o.append(a(e))}function l(){u.textContent=s.filter((e=>e.date===i&&!e.completed)).length}function h(){"Today's Tasks"===document.querySelector(".view h1").textContent&&c(),l()}return e.subscribe("taskAdded",h),e.subscribe("taskChecked",h),e.subscribe("taskUnchecked",h),e.subscribe("taskDeleted",h),e.subscribe("taskUpdated",h),{renderView:c,renderStats:l}}();var ie=36e5,se={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},ue=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,ce=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,de=/^([+-])(\d{2})(?::?(\d{2}))?$/;function le(e,t){o(1,arguments);var n=t||{},r=null==n.additionalDigits?2:b(n.additionalDigits);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var a,i=he(e);if(i.date){var s=me(i.date,r);a=fe(s.restDateString,s.year)}if(isNaN(a)||!a)return new Date(NaN);var u,c=a.getTime(),d=0;if(i.time&&(d=we(i.time),isNaN(d)||null===d))return new Date(NaN);if(!i.timezone){var l=new Date(c+d),h=new Date(0);return h.setFullYear(l.getUTCFullYear(),l.getUTCMonth(),l.getUTCDate()),h.setHours(l.getUTCHours(),l.getUTCMinutes(),l.getUTCSeconds(),l.getUTCMilliseconds()),h}return u=be(i.timezone),isNaN(u)?new Date(NaN):new Date(c+d+u)}function he(e){var t,n={},r=e.split(se.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?(n.date=null,t=r[0]):(n.date=r[0],t=r[1],se.timeZoneDelimiter.test(n.date)&&(n.date=e.split(se.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var a=se.timezone.exec(t);a?(n.time=t.replace(a[1],""),n.timezone=a[1]):n.time=t}return n}function me(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:null};var a=r[1]&&parseInt(r[1]),o=r[2]&&parseInt(r[2]);return{year:null==o?a:100*o,restDateString:e.slice((r[1]||r[2]).length)}}function fe(e,t){if(null===t)return null;var n=e.match(ue);if(!n)return null;var r=!!n[4],a=ge(n[1]),o=ge(n[2])-1,i=ge(n[3]),s=ge(n[4]),u=ge(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,s,u)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(t,s,u):new Date(NaN);var c=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(ye[t]||(pe(e)?29:28))}(t,o,i)&&function(e,t){return t>=1&&t<=(pe(e)?366:365)}(t,a)?(c.setUTCFullYear(t,o,Math.max(a,i)),c):new Date(NaN)}function ge(e){return e?parseInt(e):1}function we(e){var t=e.match(ce);if(!t)return null;var n=ve(t[1]),r=ve(t[2]),a=ve(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,a)?n*ie+6e4*r+1e3*a:NaN}function ve(e){return e&&parseFloat(e.replace(",","."))||0}function be(e){if("Z"===e)return 0;var t=e.match(de);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?n*(r*ie+6e4*a):NaN}var ye=[31,null,31,30,31,30,31,31,30,31,30,31];function pe(e){return e%400==0||e%4==0&&e%100}const ke=function(){const n=document.querySelector(".view"),r=document.createElement("h1");r.textContent="All Tasks";const o=document.createElement("div");function i(){const e=[...t.tasks];e.sort(((e,t)=>e.date>t.date?1:t.date>e.date?-1:0)),n.textContent="",o.textContent="";const i=e.reduce(((e,t)=>(e[t.date]?e[t.date].push(t):e[t.date]=[t],e)),{});for(const e in i){const t=document.createElement("div"),n=document.createElement("div");n.textContent=re(le(e),"EEEE, MMM d, yyyy"),t.appendChild(n),t.classList.add("task-group"),i[e].forEach((e=>{const n=a(e);t.append(n)})),o.append(t)}n.append(r,o)}function s(){"All Tasks"===document.querySelector(".view h1").textContent&&i(),c()}o.classList.add("task-list");const u=document.querySelector(".task-stats");function c(){const e=t.tasks;u.textContent=e.filter((e=>!e.completed)).length}return e.subscribe("taskAdded",s),e.subscribe("taskChecked",s),e.subscribe("taskUnchecked",s),e.subscribe("taskDeleted",s),e.subscribe("taskUpdated",s),{renderView:i,renderStats:c}}(),Ce=function(){const n=document.querySelector(".view"),r=document.createElement("h1");r.textContent="Projects";const o=t.tasks,i=document.createElement("section");function s(){return o.reduce(((e,t)=>{const n=t.project.toLowerCase();return e[n]?e[n].push(t):e[n]=[t],e}),{})}function u(){n.textContent="",i.textContent="";const e=s();for(const t in e){const n=document.createElement("div"),r=document.createElement("div");r.textContent=t,r.classList.add("project-name"),n.classList.add("task-group"),n.appendChild(r),e[t].forEach((e=>{const t=a(e);n.appendChild(t)})),i.appendChild(n)}n.append(r,i)}function c(){"Projects"===document.querySelector(".view h1").textContent&&u(),l()}i.classList.add("task-list");const d=document.querySelector(".project-stats");function l(){d.textContent=Object.keys(s()).length}return e.subscribe("taskAdded",c),e.subscribe("taskDeleted",c),e.subscribe("taskUpdated",c),{renderView:u,renderStats:l}}();function Te(e,t){o(2,arguments);var n=i(e),r=b(t);return isNaN(r)?new Date(NaN):r?(n.setDate(n.getDate()+r),n):n}const xe=function(){const n=document.querySelector(".view"),r=document.createElement("h1");r.textContent="Week Ahead";const o=t.tasks,i=new Date,s=[];for(let e=1;e<8;e++){const t=re(Te(i,e),"yyyy-MM-dd");s.push(t)}function u(){n.textContent="";const e=document.createElement("div");e.classList.add("task-list"),s.forEach((t=>{const n=document.createElement("div");n.classList.add("task-group");const r=document.createElement("div");r.classList.add("group-name"),r.textContent=re(le(t),"EEEE, MMM d"),n.appendChild(r),o.forEach((e=>{if(e.date===t){const t=a(e);n.appendChild(t)}})),e.appendChild(n)})),n.append(r,e)}const c=document.querySelector(".week-stats");function d(){c.textContent=o.filter((e=>s.includes(e.date)&&!e.completed)).length}function l(){"Week Ahead"===document.querySelector(".view h1").textContent&&u(),d()}return e.subscribe("taskAdded",l),e.subscribe("taskChecked",l),e.subscribe("taskUnchecked",l),e.subscribe("taskDeleted",l),e.subscribe("taskUpdated",l),{renderView:u,renderStats:d}}();!function(){const e=re(new Date,"yyyy-MM-dd"),a=r("Get out of bed","10 more minutes",e,"!!!","Rise"),o=r("TOP","Start pomodoro",e,"!!","Webdev"),i=r("Break","2 hours break",e,"!","Leisure"),s=n.loadLocalStorage();t.store(...s),s.length||t.store(a,o,i),oe.renderView(),oe.renderStats(),xe.renderStats(),Ce.renderStats(),ke.renderStats();const u=document.querySelector(".view-nav");document.querySelector(".nav-icon").addEventListener("click",(()=>u.classList.toggle("toggle"))),document.querySelector(".today-icon").textContent+=re(new Date,"d"),document.querySelectorAll(".nav-btn").forEach((e=>e.addEventListener("click",d))),document.querySelector(".today").classList.add("active");let c="Today";function d(){const e=this.textContent;e!==c&&(document.querySelector(".view-nav div.active").classList.remove("active"),c=e,this.parentNode.classList.add("active"),"Today"===e?oe.renderView():"Week"===e?xe.renderView():"Projects"===e?Ce.renderView():ke.renderView())}}(),function(){const n=document.querySelector(".form-overlay"),a=document.querySelector(".grid-container"),o=document.querySelector(".cancel");[n,o].forEach((e=>e.addEventListener("click",(e=>{s(n,a),i.reset()}))));const i=document.querySelector(".task-form");function s(e,t){t.classList.toggle("blur"),e.classList.toggle("active")}i.addEventListener("submit",(function(o){o.preventDefault();const u=function(e){const n=e.elements,a=r(n.name.value,n.notes.value,n.date.value,n.priority.value,n.project.value||"No Project");return t.store(a),a}(this);e.publish("taskAdded",u),s(n,a),i.reset()})),i.addEventListener("click",(e=>e.stopPropagation())),document.querySelector(".task-btn").addEventListener("click",(()=>{i.date.value=re(new Date,"yyyy-MM-dd"),s(n,a),document.querySelector(".task-form #name").focus()}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,